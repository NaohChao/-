#include "common.h"
#include "include.h"
#include "camera.h"


#define   steer_mid  395
#define  steer_left_max  478
#define  steer_right_max 312


float steer_zhi_kp  ;
float steer_zhi_kd  ;
float steer_wan_kp_left;
float steer_wan_kd_left;
float steer_wan_kp_right;
float steer_wan_kd_right;
float steer_kp_bottom;
float steer_kd_bottom;

uint8 imgbuff[CAMERA_R_H][CAMERA_W];                             //定义存储接收图像的数组
uint8 imgpro[CAMERA_R_H][CAMERA_W];                              //二值化处理图像数组
uint8 V_Cnt = 0;
volatile IMG_STATUS_e      img_flag = IMG_START;        //图像状态

uint16 VS=0;
uint16 HS=0;
uint8 num;
int16 mid_old=100;
int16 midline[40]={0};
uint16 steer_out;
int i,j;
int count;
int stop_flag=0;
int qpx_flag=0;
int count_qpx;

uint16 motor;

uint8 break_right,break_left;
int16 leftline[40];
int16 rightline[40];
uint8 leftline_flag,rightline_flag;
uint8  xiaos_flag,shizi_flag,dawan_flag;
uint8 shizi_flag_zhi;
uint8 start_find;
unsigned char find_line_right,find_line_left=0;
unsigned char sao_zuo,sao_you=1;
unsigned char shizi_flag,shizi_flag_zhi=0;
unsigned char white=0;
unsigned char start_find,allwhite=0;
float slope1,slope2,slope;
unsigned char  xierushizi_flag=0;
unsigned char  tiaobian=0;
unsigned char  shizi_flag_xie=0;
unsigned char shizi_star=0;
unsigned char find=0;
unsigned char break_left_shizi,break_right_shizi=0;
uint8 shizi_star_right,shizi_star_left;
uint8 xiaos_flag=0;
uint8 buxian_flag_left,buxian_flag_right=0;
int zhongxian_front[4]={0};
int zhongxian_back[4]={0};
uint8 zhidao_flag,wandao_flag=0;
int error_steer[6]={0};
uint8 count_ruwan,count_chuwan=0;
uint8 ruwan_flag,chuwan_flag=0;
int zhongxian_front_ave,zhongxian_back_ave=0;
int tubian=0;
uint8 qipaoxian_flag=0;
long time_now=0;
uint8 weight[20]={20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1};
uint8 width[40]={70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,146,148,150};
uint8 kuandu[40];
int   line_spacing;
int panduan_flag=0;

uint8  sz[CAMERA_R_H]={ 30,31,32,
34,36,38,
41,44,47,
51,55,59,
64,69,74,
80,86,92,
98,104,110,
116,122,128,
134,140,146,
152,158,164,
170,176,182,
188,194,200,
206,212,218,
224//,230
};


void camera(void)
{
  if(img_flag == IMG_FINISH)
  {
    img_flag = IMG_PROCESS;
    
//    PORTC_ISFR = ~0;               //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
//    enable_irq(PORTC_IRQn);
//    img_flag = IMG_START;
    
    
    ///**********    串口发送    **************////
    
    //    uart_putchar(UART4,0xff);
    //    for(int j = 0;j<CAMERA_R_H;j++)
    //    {
    //      for(int i = 0;i<CAMERA_W;i++)
    //      {
    //        if(imgbuff[j][i]==0xff)
    //        {
    //          imgbuff[j][i]=0xfe;
    //        }
    //        uart_putchar(UART4,imgbuff[j][i]);
    //      }
    //    }
    
    
    
    //        
    //         /*************固定二值化和噪声消除**********/
    //        for(int i=0;i<CAMERA_R_H;i++)
    //        {
    //          for(int j=0;j<CAMERA_W;j++)
    //          {
    //          if(imgbuff[i][j] <= ThreadHold) 
    //             imgpro[i][j]=BLACK_C;
    //          else 
    //             imgpro[i][j]=WHITE_C;
    //          imgbuff[i][j]=imgpro[i][j];
    //           }
    //       }
    //      
    //        for(int i=0;i<CAMERA_R_H;i++)
    //        {
    //          for(int j=0;j<CAMERA_W;j++)
    //          {
    //            imgpro[i][j]=0;              //图像数组清零
    //          }
    //        }
    //        for(int i=0;i<CAMERA_R_H;i++)
    //        {
    //          for(int j=0;j<CAMERA_W;j++)
    //          {
    //            int averg;
    //            averg=(int)(imgbuff[i-1][j-1]+imgbuff[i-1][j]+imgbuff[i-1][j+1]+imgbuff[i][j-1]+imgbuff[i][j+1]+imgbuff[i+1][j-1]+imgbuff[i+1][j]+imgbuff[i+1][j+1])/8;
    //            if(abs (imgbuff[i][j]-averg)>147&&imgbuff[i][j]-averg<0)
    //              imgpro[i][j]=WHITE_C;
    //            if(abs (imgbuff[i][j]-averg)>147&&imgbuff[i][j]-averg>0)
    //              imgpro[i][j]=BLACK_C;
    //            if(abs (imgbuff[i][j]-averg)<147)
    //              imgpro[i][j]=imgbuff[i][j];
    //          }
    //        }
    
    //    LP_image();
    
    
    //    if(stop_flag==0)
    //    {
    
    /*************各种标志清零********************/
    sao_zuo=1;
    sao_you=1;
    leftline_flag=0;
    rightline_flag=0;
    break_right=39;
    break_left=39;
    
    
    panduan_flag=0;
    
    /*************确定基础寻线开始的点***************/
    if(mid_old<=1+Interval)
    {
      sao_zuo=0;
      mid_old=1+Interval;
    }
    else if(mid_old>=CAMERA_W-Interval-2)
    {
      sao_you=0;
      mid_old=CAMERA_W-Interval-2;
    }
    
    
    
    /*************开始扫描最底行左线*******************/
    if(sao_zuo==1)
    {
      for( i=mid_old;i>=Interval;i--)
      {
        if(imgbuff[Last_line][i]-imgbuff[Last_line][i-Interval]>Jump_threhold)
        {
          leftline[Last_line]=i-Interval;
          leftline_flag=1;
          break;
        }
        else
        {
          leftline_flag=0;
        }
      }
    }
    /*************开始扫描最底行右线*******************/
    if(sao_you==1)
    {
      for(i=mid_old;i<=CAMERA_W-Interval-1;i++)
      {
        if(imgbuff[Last_line][i]-imgbuff[Last_line][i+Interval]>Jump_threhold)
        {
          rightline[Last_line]=i+Interval;
          rightline_flag=1;
          break; 
        }
        else
        {
          rightline_flag=0;
        }
      }
    }
    /*************最底行补线程序*****************/
    if(leftline_flag==1 && rightline_flag==0)
    {
      rightline[Last_line]=leftline[Last_line]+140;
      if(rightline[Last_line]<CAMERA_W)
      {
        rightline[Last_line]=CAMERA_W;
      }
    }
    
    if(leftline_flag==0 && rightline_flag==1)
    {
      leftline[Last_line]=rightline[Last_line]-140;
      if(leftline[Last_line]>0)
      {
        leftline[Last_line]=0;
      }
    }
    
    midline[Last_line]=(rightline[Last_line]+leftline[Last_line])/2;
    mid_old =midline[Last_line];
    
    
    
    
    /*****************起跑线判断***************/
    if(leftline[CAMERA_R_H-1]<0||rightline[CAMERA_R_H-1]>CAMERA_W)
    {
      qpx_flag=1;
    }
    if(qpx_flag==1)
    {
      count_qpx=0;
      for(int i=0;i<CAMERA_W-1;i++)
      {
        if(abs(imgbuff[CAMERA_R_H-1][i]-imgbuff[CAMERA_R_H-1][i+1])>100)
        {
          count_qpx++;
        }
        if(count_qpx>=10)
        {
          stop_flag=1;
          break;
        }
      }
    }
    
    
    
    
    /***************基本跟踪算法*********************/
    
    if(stop_flag==0)
    {
      //      
      //左线跟踪
      if(leftline_flag==1)  /////
      {
        for(int i=CAMERA_R_H-2;i>=0;i--)  // 40
        {
          
          for(j=Tracking_NUM;j>=0;j--) ///    18
          {
            if(leftline[i+1]+j-Tracking_displacement>=0 && leftline[i+1]+j+Interval-Tracking_displacement<CAMERA_W)   //   9
            {
              if(imgbuff[i][leftline[i+1]+j+Interval-Tracking_displacement]-imgbuff[i][leftline[i+1]+j-Tracking_displacement]>(Jump_threhold-0.3*(39-i)))   //  5  
              {
                leftline[i]=leftline[i+1]+j-Tracking_displacement;
                find_line_left=1;
                break_left=0;
                break;
              }
              else
              {
                find_line_left=0;
              }
            }
          }
          if(find_line_left==0)
          {
            break_left=i;
            break;
          }
        }
      }
      
      //右线跟踪
      if(rightline_flag==1)
      {
        for(int i=CAMERA_R_H-2;i>=0;i--)
        {
          
          for( j=0;j<=Tracking_NUM;j++) //  18
          {
            if(rightline[i+1]+j-Tracking_displacement-Interval>=0 && rightline[i+1]+j-Tracking_displacement<CAMERA_W)
            {
              if(imgbuff[i][rightline[i+1]+j-Tracking_displacement-Interval]-imgbuff[i][rightline[i+1]+j-Tracking_displacement]>(Jump_threhold-0.3*(39-i)))
              {
                rightline[i]=rightline[i+1]+j-Tracking_displacement;
                find_line_right=1;
                break_right=0;
                break;
              }
              else
              {
                find_line_right=0;
              }
            }
          }
          if(find_line_right==0)
          {
            break_right=i;
            break;
          }  
        }   
      }
      /*********************小S判断***************/
      //        xiaos_flag=0;
      //      
      //        if(break_right+break_left<=10)                            //小S判断
      //        {
      //          xiaos_flag=1;
      //        }
      
      
      //        shizi_flag=0;
      /*******************十字判断********************/
      //****直入十字判断*****//
      shizi_flag_zhi=0;
      
      if((break_left>=30|| break_right>=30 )&& abs(break_right-break_left)<=8)    ////可能出现十字的情况，两边同时无法跟踪，且差的绝对值不大
      {
        if(break_left<=break_right)               //确定开始搜索全白图像的起点
        {
          start_find=break_left;
        }
        else
        {
          start_find=break_right;
        }
        count=0;
        for(j=start_find-2;j>=start_find-4;j--)
        {
          allwhite=0;
          for(i=0;i<=CAMERA_W-1;i++)
          {
            if(imgbuff[j][i]>150)              //直接对当前行进行检测，判断是否为全白
            {
              allwhite++;
            }
          }
          if(allwhite>=CAMERA_W-5)      ////////     20  ????????     ////////
          {
            allwhite=0;
            count++;                           //判断当白点数过多时，则认为前方为十字，开始从前往后补线
          }
          if(count>=2)
          {
            shizi_flag_zhi=1;
            break;
          }         
        }
      }
      
      
      
      /*********************直入十字补线程序**************************/
      
      if(shizi_flag_zhi==1)                            //如果十字标志位等于一，那么就继续向前寻找可以跟踪的黑线
      {
        
        panduan_flag=1;
        
        shizi_star_left=0;
        count=0;
        for(i=start_find-3;i>=0;i--)
        {
          for(j=CAMERA_W/2;j>=Interval;j--)
          {
            if(imgbuff[i][j]-imgbuff[i][j-Interval]>Jump_threhold)    /////////   跳变大小？？？？？？？？   /////////
            {
              count++;
              break;
            }
          }
          if(count==3)
          {
            count=0;
            shizi_star_left=i;
            break;
          }
        }
        
        shizi_star_right=0;
        count=0;
        for(i=start_find-3;i>=0;i--)
        {
          for(j=CAMERA_W/2;j<=CAMERA_W-Interval-1;j++)
          {
            if(imgbuff[i][j]-imgbuff[i][j+Interval]>Jump_threhold)       /////////   跳变大小？？？？？？？？   /////////
            {
              count++;
              break;
            }
          }
          if(count==3)
          {
            count=0;
            shizi_star_right=i;
            break;
          }
        }
        
        if(shizi_star_right<shizi_star_left)                       //当再次找到开始的黑线位置时，将开始位置靠前的赋值给实际开始位置
        {
          shizi_star=shizi_star_right;
        }
        else
        {
          shizi_star=shizi_star_left;
        }
        if(shizi_star!=0) 
        {
          for(j=CAMERA_W/2;j>=Interval;j--)                    //开始寻找十字开始的基准点
          {
            if(imgbuff[shizi_star-2][j]-imgbuff[shizi_star-2][j-Interval]>Jump_threhold)
            {
              leftline[shizi_star-2]=j-Interval;
              break;
            }
          }
          
          for(j=CAMERA_W/2;j<=CAMERA_W-Interval-1;j++)
          {
            if(imgbuff[shizi_star-2][j]-imgbuff[shizi_star-2][j+Interval]>Jump_threhold)
            {
              rightline[shizi_star-2]=j+Interval;
              break;
            }
          }
          
          /**************重新开始的十字黑线跟踪程序*****************/
          break_left_shizi=39;                            
          break_right_shizi=39;
          
          for(i=shizi_star-2-1;i>=0;i--)
          {
            
            for(j=Tracking_NUM;j>=0;j--)
            {
              if(leftline[i+1]+j-Tracking_displacement>0 && leftline[i+1]+j+Interval-Tracking_displacement<CAMERA_W)
              {
                if(imgbuff[i][leftline[i+1]+j+Interval-Tracking_displacement]-imgbuff[i][leftline[i+1]+j-Tracking_displacement]>Jump_threhold)
                {
                  leftline[i]=leftline[i+1]+j-Tracking_displacement;
                  find_line_left=1;
                  break_left_shizi=0;
                  break;
                }
                else
                {
                  find_line_left=0;
                }
              }
            }
            if(find_line_left==0)
            {
              break_left_shizi=i;
              break;
            }
          }
          
          for(i=shizi_star-2-1;i>=0;i--)
          {
            
            for(j=0;j<=Tracking_NUM;j++)
            {
              if(rightline[i+1]+j-Interval-Tracking_displacement>0 && rightline[i+1]+j-Tracking_displacement<CAMERA_W)
              {
                if(imgbuff[i][rightline[i+1]+j-Interval-Tracking_displacement]-imgbuff[i][rightline[i+1]+j-Tracking_displacement]>Jump_threhold)
                {
                  rightline[i]=rightline[i+1]+j-Tracking_displacement;
                  find_line_right=1;
                  break_right_shizi=0;
                  break;
                }
                else
                {
                  find_line_right=0;
                }
              }
            }
            if(find_line_right==0)
            {
              break_right_shizi=i;
              break;
            }
          }
          
          //开始十字向前补线程序！！
          if(break_left_shizi!=0)
          {
            slope=(float)(leftline[break_left_shizi+1]+leftline[break_left_shizi+2]-leftline[break_left_shizi+3]-leftline[break_left_shizi+4])/4;
            for(i=break_left_shizi;i>=0;i--)
            {
              leftline[i]=leftline[break_left_shizi]+slope*(break_left_shizi-i);
            }
          }
          if(break_right_shizi!=0)
          {
            slope=(float)(rightline[break_right_shizi+1]+rightline[break_right_shizi+2]-rightline[break_right_shizi+3]-rightline[break_right_shizi+4])/4;
            for(i=break_right_shizi;i>=0;i--)
            {
              rightline[i]=rightline[break_right_shizi]+slope*(break_right_shizi-i);
            }
          }
          
          
          //根据前面的斜率，向后补线（更加好的补线方法！！！！？？？？）
          slope=(float)(leftline[shizi_star-2]+leftline[shizi_star-3]+leftline[shizi_star-4]-leftline[shizi_star-5]-leftline[shizi_star-6]-leftline[shizi_star-7])/30;
          for(i=shizi_star-1;i<=CAMERA_R_H-1;i++)
          {
            leftline[i]=leftline[shizi_star-2]-slope*(shizi_star-2-i);
          }
          slope=(float)(rightline[shizi_star-2]+rightline[shizi_star-3]+rightline[shizi_star-4]-rightline[shizi_star-5]-rightline[shizi_star-6]-rightline[shizi_star-7])/30;
          for(i=shizi_star-1;i<=CAMERA_R_H-1;i++)
          {
            rightline[i]=rightline[shizi_star-2]-slope*(shizi_star-2-i);
          }
        }
      }  
      /******************斜入十字判断************************/
      
      xierushizi_flag=0;
      
      tiaobian=0;
      
      if(shizi_flag_zhi==0)
      {
        if( break_right-break_left>8&leftline_flag==1)                               //右转斜入十字
        {
          for(i=CAMERA_R_H-3;i>break_left+3;i--)
          {
            if(leftline[i]>=leftline[i+1] && leftline[i]>=leftline[i-1] && leftline[i+1]>=leftline[i+2] && leftline[i-1]>=leftline[i-2])
            {
              tiaobian=i;
              
              slope1=(float)(leftline[i]-leftline[CAMERA_R_H-1])/(CAMERA_R_H-1-i);
              if(i-break_left>=5)
              {
                slope2=(float)(leftline[i-5]-leftline[i])/5;
              }
              else
              {
                slope2=(float)(leftline[break_left]-leftline[i])/(i-break_left);
              }
              break;
            }
          }
          
          if(tiaobian!=0 && abs(slope1-slope2)>=6 && slope1*slope2<0)
          {
            xierushizi_flag=1;
            break_left=tiaobian;
          }
        }
        
        else if(rightline_flag==1 && break_left-break_right>8)
        {
          for(i=CAMERA_R_H-3;i>break_right+3;i--)                                   //寻找右边的跳变点
          {
            if(rightline[i]<=rightline[i+1] && rightline[i]<=rightline[i-1] && rightline[i+1]<=rightline[i+2] && rightline[i-1]<=rightline[i-2])
            {
              tiaobian=i;
              slope1=(float)(rightline[i]-rightline[CAMERA_R_H-1])/(CAMERA_R_H-1-i);
              
              if(i-break_right>=5)
              {
                slope2=(float)(rightline[i-5]-rightline[i])/5;
              }
              else
              {
                slope2=(float)(rightline[break_right]-rightline[i])/(i-break_right);                  
              }
              
              break;
            }
          }
          
          if(tiaobian!=0  && abs(slope1-slope2)>=6 && slope1*slope2<0)
          {
            xierushizi_flag=2;
            break_right=tiaobian;
          }
        } 
      }
      
      /***************跳变之后补线********************/
      if(xierushizi_flag==1)                         //左斜入十字补线！
      {
        
        panduan_flag=2;
        
        for(i=tiaobian+1;i>=0;i--)
        {
          leftline[i]=leftline[tiaobian]+slope1*(tiaobian-i);      //tiaobian-i+2
        }
        for(i=break_right;i>=0;i--)
        {
          rightline[i]=leftline[i]+kuandu[i];
        }
      }
      else if(xierushizi_flag==2)                    //右斜入十字补线！
      {
        
        panduan_flag=2;
        
        for(i=tiaobian+1;i>=0;i--)
        {
          rightline[i]=rightline[tiaobian]+slope1*(tiaobian-i);   //tiaobian-i+2
        }
        for(i=break_left;i>=0;i--)
        {
          leftline[i]=rightline[i]-kuandu[i];
        }
      }
      
      /*************************************************
      十字处理完毕
      *************************************************/
      
      
      /*********************大弯判断**************************/
      //
      //    dawan_flag=0;
      //    
      //    if(shizi_flag_zhi==0)
      //    {
      //      if(break_left>=30&& break_right>=30)
      //      {
      //        dawan_flag=1;
      //      }
      //    }
      //    
      //    
      //    /*********************大弯补线程序**************************/
      //    
      //    if(dawan_flag==1)
      //    {
      //      if(break_right>break_left)
      //      {
      //        for(int i=break_right;i>=break_left;i--)
      //        {
      //          rightline[i]=leftline[i]+kuandu[i];
      //        }
      //      }
      //      else
      //      {
      //        for(int i=break_left;i>=break_right;i--)
      //        {
      //          leftline[i]=rightline[i]-kuandu[i];
      //        }
      //      }
      //    }
      
      //*************************************************/  
      
      
      buxian_flag_left=0;
      buxian_flag_right=0;
      
      /*************************************************
      正常情况下的补线程序
      *************************************************/
      
      /*****************向前进行补线*******************/
      if(xierushizi_flag==0 && shizi_flag_zhi==0 )
      {           
        if(break_right<=30 && break_right!=0)
        {
          slope=(float)(rightline[break_right+1]+rightline[break_right+2]+rightline[break_right+3]-rightline[break_right+4]-rightline[break_right+5]-rightline[break_right+6])/9;
          for(i=break_right;i>=0;i--)
          {
            rightline[i]=slope*(break_right-i)+rightline[break_right];
          }  
          buxian_flag_right=1;
        }
        
        if(break_left<=30 && break_left!=0)
        {
          slope=(float)(leftline[break_left+1]+leftline[break_left+2]+leftline[break_left+3]-leftline[break_left+4]-leftline[break_left+5]-leftline[break_left+6])/9;
          for(i=break_left;i>=0;i--)
          {
            leftline[i]=slope*(break_left-i)+leftline[break_left];
          }
          buxian_flag_left=1;
        }
        
      }
      /*****************对左线或者右线有一条完全丢线或者可参考点非常少的情况*******************/
      
      if(xierushizi_flag==0 && shizi_flag_zhi==0)
      {
        if(leftline_flag==1 && break_left<=30 && break_right>30)
        {
          
          panduan_flag=3;
          
          for(i=break_right;i>=0;i--)
          {
            rightline[i]=leftline[i]+kuandu[i];
          }
        }
        
        if(rightline_flag==1 && break_right<=30 && break_left>30)
        {
          
          panduan_flag=3;
          
          for(i=break_left;i>=0;i--)
          {
            leftline[i]=rightline[i]-kuandu[i];
          }
        }
      }
      for(i=39;i>=0;i--)
      {
        kuandu[i]=rightline[i]-leftline[i];
      }  
      
      
      
      
      /*************************************************
      开始计算前20行与后20行的偏差
      *************************************************/
      zhongxian_front[3]=zhongxian_front[2];
      zhongxian_front[2]=zhongxian_front[1];
      zhongxian_front[1]=zhongxian_front[0];
      
      long temp=0;
      for(i=CAMERA_R_H-2;i>=19;i--)
      {
        temp=temp+weight[i-19]*(leftline[i]+rightline[i])/2;
      }
      zhongxian_front[0]=temp/210;
      
      zhongxian_front_ave=(zhongxian_front[3]+zhongxian_front[2]+zhongxian_front[1]+zhongxian_front[0])/4;
      
      zhongxian_back[3]=zhongxian_back[2];
      zhongxian_back[2]=zhongxian_back[1];
      zhongxian_back[1]=zhongxian_back[0];
      
      temp=0;
      for(i=19;i>=0;i--)
      {
        temp=temp+weight[i]*(leftline[i]+rightline[i])/2;
      }
      zhongxian_back[0]=temp/210;
      
      zhongxian_back_ave=(zhongxian_back[3]+zhongxian_back[2]+zhongxian_back[1]+zhongxian_back[0])/4;
      
      
      /*************************************************
      开始判断赛道类型
      *************************************************/
      steer_zhi_kp=0.5;
      steer_zhi_kd=1.5;   //80-95
      steer_wan_kp_left=0.5;                 //2.0;
      steer_wan_kd_left=1;                    //3.2;
      steer_wan_kp_right=0.78;                      //2.0;
      steer_wan_kd_right=1;                        //3.2;
      
      
      zhidao_flag=0;
      if(zhongxian_front_ave>70 && zhongxian_front_ave<130 && zhongxian_back_ave>70 && zhongxian_back_ave<130)
      {
        zhidao_flag=1;
        
      }
      
      error_steer[2]=error_steer[1];
      error_steer[1]=error_steer[0];  
      error_steer[0]=100-zhongxian_front[0];        /////////   100   ???  ///////////
      /*****中线的平滑传递*****/
      
      //        if(break_right==0 && break_left==0 && shizi_flag_zhi!=0 && xierushizi_flag!=0)    //两边都未找到线，保持上一次的误差
      //        {
      //          error_steer[5]=error_steer[4];
      //          error_steer[4]=error_steer[3];
      //          error_steer[3]=error_steer[2];
      //          error_steer[2]=error_steer[1];
      //          error_steer[1]=error_steer[0];
      //        }
      //        else                                     //正常情况下，进行参数的平滑传递
      //        {  
      //          error_steer[5]=error_steer[4];
      //          error_steer[4]=error_steer[3];
      //          error_steer[3]=error_steer[2];
      //          error_steer[2]=error_steer[1];      
      //          error_steer[1]=error_steer[0];
      //          error_steer[0]=100-zhongxian_front[0];
      //        }
      //        
      if(zhidao_flag==1)
      {
        steer_out=steer_mid+steer_zhi_kp*error_steer[0]+steer_zhi_kd*(error_steer[0]-error_steer[1]);
      }
      else
      {
        if(error_steer[0]>=0)
        {
          steer_out=steer_mid+steer_wan_kp_left*error_steer[0]+steer_wan_kd_left*(error_steer[0]-error_steer[1]); 
        }
        else
        {
          steer_out=steer_mid+steer_wan_kp_right*error_steer[0]+steer_wan_kd_right*(error_steer[0]-error_steer[1]);
        }
      }
      
      
//      motor=3500;
//      
//      FTM_PWM_Duty(FTM0, FTM_CH1,3500);//A4
//      FTM_PWM_Duty(FTM0, FTM_CH2,0);//A5
//      FTM_PWM_Duty(FTM0, FTM_CH3,3500);//A6
//      FTM_PWM_Duty(FTM0, FTM_CH4, 0);//A7
    }
    
    
    
    if(stop_flag==1)
    {
      error_steer[0]=100-midline[Last_line];
      
      steer_kp_bottom=1;
      
      steer_out=steer_mid+steer_kp_bottom*error_steer[0];
//      
////      motor=0;
//      
////      FTM_PWM_Duty(FTM0, FTM_CH1,0);//A4
////      FTM_PWM_Duty(FTM0, FTM_CH2,0);//A5
////      FTM_PWM_Duty(FTM0, FTM_CH3,0);//A6
////      FTM_PWM_Duty(FTM0, FTM_CH4,0);//A7
    }
    
    
    
    
    
    
    
    
    if(steer_out>=steer_left_max)
    {
      steer_out=steer_left_max;
    }
    if(steer_out<=steer_right_max)
    {
      steer_out=steer_right_max;
    }
    
    FTM_PWM_Duty(FTM1,FTM_CH0,steer_out);
    
//    FTM_PWM_Duty(FTM0, FTM_CH1,motor);//A4
//    FTM_PWM_Duty(FTM0, FTM_CH2,0);//A5
//    FTM_PWM_Duty(FTM0, FTM_CH3,0);//A6
//    FTM_PWM_Duty(FTM0, FTM_CH4, motor);//A7
    
    
    LCD_Show_Number(1,1,xierushizi_flag);
    LCD_Show_Number(30,1,shizi_flag_zhi);
    LCD_Show_Number(60,1,zhidao_flag);
    LCD_Show_Number(90,1,dawan_flag);
    
    
    
    /*************液晶屏显示程序**********/
    ////        
    //        for(int j=0;j<CAMERA_R_H;j++)
    //        {
    //          for(int i=CAMERA_W;i>0;i--)
    //          {
    //            if(i%4==0)
    //            {
    //              if(imgbuff[j][i]<ThreadHold)
    //              {
    //              OLED_DrawPoint(i/4,64-j,0);
    //              }
    //              else
    //              {
    //                OLED_DrawPoint(i/4,64-j,1);
    //              }
    //             // OLED_DrawPoint(midline[j+1]/4,64-i,0);
    //            }
    //            
    //          }
    //        }
    
    
    LCD_Show_Number (20,4,break_left);
    LCD_Show_Number (80,4,break_right);
    LCD_Show_Number (50,6,steer_out);
    LCD_Show_Number (20,7,panduan_flag);
    LCD_Show_Number(80,7,stop_flag);
    
    
    
    
    
    //    OLED_Refresh_Gram();
    
    
    
    PORTC_ISFR = ~0;               //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
    enable_irq(PORTC_IRQn);
    img_flag = IMG_START;
  }
}
void LP_image() 
{
  uint8 *a_point,*b_point,*c_point; 
  uint8 a,b,c,d,i,j; 
  
  for(i=0;i<CAMERA_R_H;i++) 
  {    
    for(j=1;j<(CAMERA_W-1);j++)
    {
      a_point=&imgbuff[i][j-1];
      b_point=&imgbuff[i][j]; 
      c_point=&imgbuff[i][j+1];  
      
      a=*a_point;
      b=*b_point;
      c=*c_point;
      
      if(a>=b) 
      {
        d=b;b=a;a=d; 
      }
      if(a>=c)
      {
        d=c;c=a;a=d;
      }
      if(b>=c)
      {
        d=c;c=b;b=d;
      }
      *(b_point)=b;
    }              
  }
}




/*!
*  @brief      PORTB中断服务函数
*  @since      v5.0
*/
void portb_handler()
{
  uint8  n;    //引脚号
  n = 7;                              //行中断
  if(PORTB_ISFR & (1 << n))           //PTB7触发中断
  {
    PORTB_ISFR  = (1 << n);        //写1清中断标志位
    HS++;
    V_Cnt++;
    if(V_Cnt <= CAMERA_H)
    {
      if(V_Cnt==sz[num])
      {
        systick_delay(440);
        DMA_EN(DMA_CH0);
        num++;
      }
    }
    
    else
    {
      disable_irq(PORTB_IRQn);
      img_flag = IMG_FINISH;
    }
    
  }
  
  
}

void portc_handler()
{
  uint8  n;    //引脚号
  n = 3;                               //场中断
  if(PORTC_ISFR & (1 << n))           //PTC3触发中断
  {
    PORTC_ISFR  = (1 << n);        //写1清中断标志位
    VS++;
    img_flag = IMG_GATHER;      
    DMA_DADDR(DMA_CH0) = (uint32)imgbuff;    //恢复地址
    V_Cnt = 0;
    num=0;
    enable_irq(PORTB_IRQn);
    disable_irq(PORTC_IRQn);
  }
}